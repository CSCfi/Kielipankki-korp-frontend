{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"mod",
				"mod	Angular Module service"
			],
			[
				"dir",
				"dir	Angular Module directive (complete)"
			],
			[
				"l",
				"l:a	left:auto"
			],
			[
				"value",
				"valueArray"
			],
			[
				"br",
				"browserWarn"
			],
			[
				"for",
				"forof	Object Comprehension"
			],
			[
				"fo",
				"forin	Array Comprehension"
			],
			[
				"li",
				"list-style-position"
			],
			[
				"par",
				"routeParams	\\$routeParams"
			],
			[
				"tab",
				"table	Tag"
			],
			[
				"i",
				"import"
			]
		]
	},
	"buffers":
	[
		{
			"file": "app/index.html",
			"settings":
			{
				"buffer_size": 17372,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "class BaseResults\n    constructor: (tabSelector, resultSelector) ->\n        @$tab = $(tabSelector)\n        @$result = $(resultSelector)\n        @index = @$tab.index()\n        @optionWidget = $(\"#search_options\")\n        @num_result = @$result.find(\".num-result\")\n        @$result.add(@$tab).addClass \"not_loading\"\n\n    onProgress: (progressObj) ->\n\n        # TODO: this item only exists in the kwic.\n        @num_result.html prettyNumbers(progressObj[\"total_results\"])\n        unless isNaN(progressObj[\"stats\"])\n            try\n                @$result.find(\".progress progress\").attr \"value\", Math.round(progressObj[\"stats\"])\n            catch e\n                c.log \"onprogress error\", e\n        @$tab.find(\".tab_progress\").css \"width\", Math.round(progressObj[\"stats\"]).toString() + \"%\"\n\n    renderResult: (data) ->\n\n        #       this.resetView();\n        # @$result.find(\".error_msg\").remove()\n        c.log \"renderResults\", @proxy\n        util.setJsonLink @proxy.prevRequest if @$result.is(\":visible\")\n\n        #$(\"#result-container\").tabs(\"select\", 0);\n        disabled = $(\"#result-container\").korptabs(\"option\", \"disabled\")\n        newDisabled = $.grep(disabled, (item) =>\n            item isnt @index\n        )\n        $(\"#result-container\").korptabs \"option\", \"disabled\", newDisabled\n        if data.ERROR\n            @resultError data\n            false\n\n    resultError: (data) ->\n        c.log \"json fetch error: \" + $.dump(data.ERROR)\n        @hidePreloader()\n        @resetView()\n        $('<object class=\"korp_fail\" type=\"image/svg+xml\" data=\"img/korp_fail.svg\">')\n            .append(\"<img class='korp_fail' src='img/korp_fail.svg'>\")\n            .add($(\"<div class='fail_text' />\")\n            .localeKey(\"fail_text\"))\n            .addClass(\"inline_block\")\n            .prependTo(@$result)\n            .wrapAll \"<div class='error_msg'>\"\n        util.setJsonLink @proxy.prevRequest\n\n    showPreloader: ->\n        @$result.add(@$tab).addClass(\"loading\").removeClass \"not_loading\"\n        @$tab.find(\".tab_progress\").css \"width\", 0 #.show();\n        @$result.find(\"progress\").attr \"value\", 0\n\n    hidePreloader: ->\n        @$result.add(@$tab).removeClass(\"loading\").addClass \"not_loading\"\n\n    resetView: ->\n        @$result.find(\".error_msg\").remove()\n\n\nclass view.KWICResults extends BaseResults\n    constructor : (tabSelector, resultSelector) ->\n        self = this\n        @prevCQP = null\n        super tabSelector, resultSelector\n        @initHTML = @$result.html()\n        @proxy = kwicProxy\n        @readingProxy = new model.KWICProxy()\n        @current_page = 0\n        c.log \"selectionManager\", getScope(\"kwicCtrl\"), getScope(\"kwicCtrl\").selectionManager\n        @selectionManager = getScope(\"kwicCtrl\").selectionManager\n        @$result.click =>\n            return unless @selectionManager.hasSelected()\n            @selectionManager.deselect()\n            $.sm.send \"word.deselect\"\n\n        @$result.find(\".reading_btn\").click =>\n            isReading = @$result.is(\".reading_mode\")\n            if $.bbq.getState(\"reading_mode\")\n                $.bbq.removeState \"reading_mode\"\n            else\n                $.bbq.pushState reading_mode: true\n\n\n        @$result.addClass \"reading_mode\" if $.bbq.getState(\"reading_mode\")\n\n    resetView: ->\n        super()\n        # @$result.find(\".results_table,.pager-wrapper\").empty()\n        @$result.find(\".pager-wrapper\").empty()\n\n    getProxy: ->\n        return @readingProxy if @$result.is(\".reading_mode\")\n        @proxy\n\n    onentry: ->\n        @centerScrollbar()\n        $(document).keydown $.proxy(@onKeydown, this)\n\n    onexit: ->\n        $(document).unbind \"keydown\", @onKeydown\n\n    onKeydown: (event) ->\n        isSpecialKeyDown = event.shiftKey or event.ctrlKey or event.metaKey\n        return if isSpecialKeyDown or $(\"input[type=text], textarea\").is(\":focus\")\n        switch event.which\n            when 78 # n\n                @$result.find(\".pager-wrapper .next\").click()\n                return false\n            when 70 # f\n                @$result.find(\".pager-wrapper .prev\").click()\n                return false\n        return unless @selectionManager.hasSelected()\n        switch event.which\n            when 38 #up\n                @selectUp()\n                false\n            when 39 # right\n                @selectNext()\n                false\n            when 37 #left\n                @selectPrev()\n                false\n            when 40 # down\n                @selectDown()\n                false\n\n    getPageInterval: (page) ->\n        items_per_page = Number(@optionWidget.find(\".num_hits\").val())\n        output = {}\n        output.start = (page or 0) * items_per_page\n        output.end = (output.start + items_per_page) - 1\n        output\n\n    renderCompleteResult: (data) ->\n        unless data.hits\n            c.log \"no kwic results\"\n            @showNoResults()\n            return\n        @$result.removeClass \"zero_results\"\n        @$result.find(\".num-result\").html prettyNumbers(data.hits)\n        @renderHitsPicture data\n        @buildPager data.hits\n        @hidePreloader()\n\n\n    # renderKwicResult: (data, sourceCQP) ->\n    #     c.log \"renderKwicResult\", data\n    #     # @$result.find(\".results_table.reading\").empty()\n    #     @renderResult \".results_table.kwic\", data, sourceCQP\n\n    renderResult: (data) ->\n        resultError = super(data)\n        return if resultError is false\n        self = this\n\n        # this.prevCQP = sourceCQP;\n        c.log \"corpus_results\"\n        isReading = @$result.is(\".reading_mode\")\n\n        applyTo \"kwicCtrl\", ($scope) ->\n            ->\n                if isReading\n                    $scope.setContextData(data)\n                else\n                    $scope.setKwicData(data)\n                    # $scope.kwic = data.kwic\n\n        @hidePreloader()\n        @$result.localize()\n        @centerScrollbar()\n        @$result.find(\".match\").children().first().click()\n\n    showNoResults: ->\n        # @$result.find(\".results_table\").empty()\n        @$result.find(\".pager-wrapper\").empty()\n        @hidePreloader()\n        @$result.find(\".num-result\").html 0\n        @$result.addClass(\"zero_results\").click()\n\n        #   this.$result.find(\".sort_select\").hide();\n        @$result.find(\".hits_picture\").html \"\"\n\n    renderHitsPicture: (data) ->\n        self = this\n        if settings.corpusListing.selected.length > 1\n            totalhits = data[\"hits\"]\n            hits_picture_html = \"<table class='hits_picture_table'><tr height='18px'>\"\n            barcolors = [\"color_blue\", \"color_purple\", \"color_green\", \"color_yellow\", \"color_azure\", \"color_red\"]\n            ccounter = 0\n            corpusOrderArray = $.grep(data.corpus_order, (corpus) ->\n                data.corpus_hits[corpus] > 0\n            )\n            $.each corpusOrderArray, (index, corp) ->\n                hits = data[\"corpus_hits\"][corp]\n                color = (if index % 2 is 0 then settings.primaryColor else settings.primaryLight)\n                hits_picture_html += \"\"\"<td class=\"hits_picture_corp\" data=\"#{corp}\"\n                                            style=\"width:#{hits / totalhits * 100}%;background-color : #{color}\"></td>\"\"\"\n\n            hits_picture_html += \"</tr></table>\"\n            @$result.find(\".hits_picture\").html hits_picture_html\n\n            # Make sure that there is no mousover effect on touch screen devices:\n            ua = navigator.userAgent\n            if ua.match(/Android/i) or ua.match(/webOS/i) or ua.match(/iPhone/i) or ua.match(/iPod/i)\n                @$result.find(\".hits_picture_table\").css \"opacity\", \"1\"\n            @$result.find(\".hits_picture_corp\").each ->\n                corpus_name = $(this).attr(\"data\")\n                $(this).tooltip\n                    delay: 0\n                    bodyHandler: ->\n                        corpusObj = settings.corpora[corpus_name.toLowerCase()]\n                        corpusObj = settings.corpora[corpus_name.split(\"|\")[0].toLowerCase()]  if currentMode is \"parallel\"\n                        nHits = prettyNumbers(data[\"corpus_hits\"][corpus_name].toString())\n                        return \"\"\"<img src=\"img/korp_icon.png\" style=\"vertical-align:middle\"/>\n                                  <b>#{corpusObj[\"title\"]} (#{nHits}) #{util.getLocaleString(\"hitspicture_hits\")})</b>\n                                  <br/><br/><i>#{util.getLocaleString(\"hitspicture_gotocorpushits\")}</i>\"\"\"\n\n\n\n            # Click to ge to the first page with a hit in the particular corpus\n            @$result.find(\".hits_picture_corp\").click (event) ->\n                theCorpus = $(this).attr(\"data\")\n\n                # Count the index of the first hit for the corpus:\n                firstIndex = 0\n                $.each data[\"corpus_order\"], (index, corp) ->\n                    return false  if corp is theCorpus\n                    firstIndex += data[\"corpus_hits\"][corp]\n\n                firstHitPage = Math.floor(firstIndex / $(\"#num_hits\").val())\n                self.handlePaginationClick firstHitPage, null, true\n                false\n\n        else\n            @$result.find(\".hits_picture\").html \"\"\n\n    scrollToShowWord: (word) ->\n        offset = 200\n        wordTop = word.offset().top\n        newY = window.scrollY\n        if wordTop > $(window).height() + window.scrollY\n            newY += offset\n        else newY -= offset  if wordTop < window.scrollY\n        $(\"html, body\").stop(true, true).animate scrollTop: newY\n        wordLeft = word.offset().left\n        area = @$result.find(\".table_scrollarea\")\n        newX = Number(area.scrollLeft())\n        if wordLeft > (area.offset().left + area.width())\n            newX += offset\n        else newX -= offset  if wordLeft < area.offset().left\n        area.stop(true, true).animate scrollLeft: newX\n\n    buildPager: (number_of_hits) ->\n        c.log \"buildPager\", @current_page\n        items_per_page = @optionWidget.find(\".num_hits\").val()\n        @movePager \"up\"\n        $.onScrollOut \"unbind\"\n        @$result.find(\".pager-wrapper\").unbind().empty()\n        if number_of_hits > items_per_page\n            @$result.find(\".pager-wrapper\").pagination number_of_hits,\n                items_per_page: items_per_page\n                callback: $.proxy(@handlePaginationClick, this)\n                next_text: util.getLocaleString(\"next\")\n                prev_text: util.getLocaleString(\"prev\")\n                link_to: \"javascript:void(0)\"\n                num_edge_entries: 2\n                ellipse_text: \"..\"\n                current_page: @current_page or 0\n\n            @$result.find(\".next\").attr \"rel\", \"localize[next]\"\n            @$result.find(\".prev\").attr \"rel\", \"localize[prev]\"\n\n    handlePaginationClick: (new_page_index, pagination_container, force_click) ->\n        c.log \"handlePaginationClick\", new_page_index, @current_page\n        self = this\n        if new_page_index isnt @current_page or !!force_click\n            isReading = @$result.is(\".reading_mode\")\n            kwicCallback = @renderResult\n\n            this.showPreloader();\n            @current_page = new_page_index\n\n            #     this.proxy.makeRequest(this.buildQueryOptions(), this.current_page, function(progressObj) {\n            @getProxy().makeRequest @buildQueryOptions(), @current_page, ((progressObj) ->\n\n                #progress\n                self.$result.find(\".progress progress\").attr \"value\", Math.round(progressObj[\"stats\"]) unless isNaN(progressObj[\"stats\"])\n                self.$tab.find(\".tab_progress\").css \"width\", Math.round(progressObj[\"stats\"]).toString() + \"%\"\n            ), ((data) ->\n                #success\n                self.buildPager data.hits\n            ), $.proxy(kwicCallback, this)\n            $.bbq.pushState page: new_page_index\n        false\n\n    buildQueryOptions: ->\n        opts = {}\n        opts.cqp = @prevCQP\n        opts.queryData = @proxy.queryData\n        opts.sort = $(\".sort_select\").val()\n        opts.random_seed = $.bbq.getState(\"random_seed\") if opts.sort is \"random\"\n        opts.context = settings.corpusListing.getContextQueryString() if @$result.is(\".reading_mode\")\n        return opts\n\n    makeRequest: (page_num) ->\n        isReading = @$result.is(\".reading_mode\")\n        @showPreloader()\n\n        applyTo \"kwicCtrl\", ($scope) ->\n            ->\n                if isReading\n                    $scope.setContextData([])\n                else\n                    $scope.setKwicData([])\n                    # $scope.kwic = data.kwic\n\n        kwicCallback = $.proxy(@renderResult, this)\n        @proxy.makeRequest @buildQueryOptions(),\n                           page_num or @current_page,\n                           (if isReading then $.noop else $.proxy(@onProgress, this)),\n                           $.proxy(@renderCompleteResult, this),\n                           kwicCallback\n\n\n    #   this.proxy.makeRequest(this.buildQueryOptions(), page_num || this.current_page, $.noop);\n    setPage: (page) ->\n        @$result.find(\".pager-wrapper\").trigger \"setPage\", [page]\n\n    centerScrollbar: ->\n        m = @$result.find(\".match:visible:first\")\n        return unless m.length\n        area = @$result.find(\".table_scrollarea\").scrollLeft(0)\n        match = m.first().position().left + m.width() / 2\n        sidebarWidth = $(\"#sidebar\").outerWidth() or 0\n        area.stop(true, true).scrollLeft match - ($(\"body\").innerWidth() - sidebarWidth) / 2\n\n    getCurrentRow: ->\n        tr = @$result.find(\".token_selected\").closest(\"tr\")\n        if @$result.find(\".token_selected\").parent().is(\"td\")\n            tr.find \"td > .word\"\n        else\n            tr.find \"div > .word\"\n\n    selectNext: ->\n        unless @$result.is(\".reading_mode\")\n            i = @getCurrentRow().index(@$result.find(\".token_selected\").get(0))\n            next = @getCurrentRow().get(i + 1)\n            return unless next?\n            $(next).click()\n        else\n            @$result.find(\".token_selected\").next().click()\n\n    selectPrev: ->\n        unless @$result.is(\".reading_mode\")\n            i = @getCurrentRow().index(@$result.find(\".token_selected\").get(0))\n            return  if i is 0\n            prev = @getCurrentRow().get(i - 1)\n            $(prev).click()\n        else\n            @$result.find(\".token_selected\").prev().click()\n\n    selectUp: ->\n        current = @selectionManager.selected\n        unless @$result.is(\".reading_mode\")\n            prevMatch = @getWordAt(current.offset().left + current.width() / 2, current.closest(\"tr\").prevAll(\".sentence\").first())\n            prevMatch.click()\n        else\n            searchwords = current.prevAll(\".word\").get().concat(current.closest(\".sentence\").prev().find(\".word\").get().reverse())\n            def = current.parent().prev().find(\".word:last\")\n            @getFirstAtCoor(current.offset().left + current.width() / 2, $(searchwords), def).click()\n\n    selectDown: ->\n        current = @selectionManager.selected\n        unless @$result.is(\".reading_mode\")\n            nextMatch = @getWordAt(current.offset().left + current.width() / 2, current.closest(\"tr\").nextAll(\".sentence\").first())\n            nextMatch.click()\n        else\n            searchwords = current.nextAll(\".word\").add(current.closest(\".sentence\").next().find(\".word\"))\n            def = current.parent().next().find(\".word:first\")\n            @getFirstAtCoor(current.offset().left + current.width() / 2, searchwords, def).click()\n\n    getFirstAtCoor: (xCoor, wds, default_word) ->\n        output = null\n        wds.each (i, item) ->\n            thisLeft = $(this).offset().left\n            thisRight = $(this).offset().left + $(this).width()\n            if xCoor > thisLeft and xCoor < thisRight\n                output = $(this)\n                false\n\n        output or default_word\n\n    getWordAt: (xCoor, $row) ->\n        output = $()\n        $row.find(\".word\").each ->\n            output = $(this)\n            thisLeft = $(this).offset().left\n            thisRight = $(this).offset().left + $(this).width()\n            false  if (xCoor > thisLeft and xCoor < thisRight) or thisLeft > xCoor\n\n        output\n\n    setupPagerMover: ->\n        self = this\n        pager = @$result.find(\".pager-wrapper\")\n        upOpts =\n            point: pager.offset().top + pager.height()\n            callback: ->\n                self.movePager \"up\"\n\n        self.movePager \"down\"\n        downOpts =\n            point: pager.offset().top + pager.height()\n            callback: ->\n                self.movePager \"down\"\n\n        self.movePager \"up\"\n        c.log \"onscrollout\", upOpts.point, downOpts.point\n        $.onScrollOut upOpts, downOpts\n\n    movePager: (dir) ->\n        pager = @$result.find(\".pager-wrapper\")\n        if dir is \"down\"\n            pager.data(\"prevPos\", pager.prev()).appendTo @$result\n        else\n            pager.data(\"prevPos\").after pager  if pager.data(\"prevPos\")\n\n\n\n\n\nclass view.ExampleResults extends view.KWICResults\n    constructor: (tabSelector, resultSelector) ->\n        super tabSelector, resultSelector\n        @proxy = new model.ExamplesProxy()\n        @$result.find(\".progress\").hide()\n        @$result.add(@$tab).addClass \"not_loading customtab\"\n        @$result.removeClass \"reading_mode\"\n\n    makeRequest: (opts) ->\n        @resetView()\n        $.extend opts,\n            success: (data) =>\n                c.log \"ExampleResults success\", data, opts\n                @renderResult \".results_table.kwic\", data, opts.cqp\n                @renderCompleteResult data\n                @hidePreloader()\n                util.setJsonLink @proxy.prevRequest\n                @$result.find(\".num-result\").html prettyNumbers(data.hits)\n\n            error: ->\n                @hidePreloader()\n\n            incremental: false\n\n        @showPreloader()\n\n        #   this.proxy.makeRequest(opts, $.proxy(this.onProgress, this));\n        @proxy.makeRequest opts, null, $.noop, $.noop, $.noop\n\n    onHpp: ->\n\n        #refresh search\n        @handlePaginationClick 0, null, true\n        false\n\n    handlePaginationClick: (new_page_index, pagination_container, force_click) ->\n        c.log \"handlePaginationClick\", new_page_index, @current_page\n        if new_page_index isnt @current_page or !!force_click\n            items_per_page = parseInt(@optionWidget.find(\".num_hits\").val())\n            opts = {}\n            opts.cqp = @prevCQP\n            opts.start = new_page_index * items_per_page\n            opts.end = (opts.start + items_per_page)\n            opts.sort = $(\".sort_select\").val()\n            @current_page = new_page_index\n            @makeRequest opts\n        false\n\n    onSortChange: (event) ->\n        opt = $(event.currentTarget).find(\":selected\")\n        c.log \"sort\", opt\n        if opt.is(\":first-child\")\n            $.bbq.removeState \"sort\"\n        else\n            c.log \"sort\", opt.val()\n            @handlePaginationClick 0, null, true\n\n\n    #     $.bbq.pushState({\"sort\" : opt.val()});\n    showPreloader: ->\n        @$result.add(@$tab).addClass(\"loading\").removeClass \"not_loading\"\n        @$tab.find(\".spinner\").remove()\n        $(\"<div class='spinner' />\").appendTo(@$tab).spinner\n            innerRadius: 5\n            outerRadius: 7\n            dashes: 8\n            strokeWidth: 3\n\n        @$tab.find(\".tabClose\").hide()\n\n    hidePreloader: ->\n        @$result.add(@$tab).addClass(\"not_loading\").removeClass \"loading\"\n        @$tab.find(\".spinner\").remove()\n        @$tab.find(\".tabClose\").show()\n\nclass view.LemgramResults extends BaseResults\n    constructor: (tabSelector, resultSelector) ->\n        self = this\n        super tabSelector, resultSelector\n\n        #   TODO: figure out what I use this for.\n        @resultDeferred = $.Deferred()\n        @proxy = lemgramProxy\n        @order = #    \"_\" represents the actual word in the order\n            vb: [\"SS_d,_,OBJ_d,ADV_d\".split(\",\")] #OBJ_h, , \"SS_h,_\".split(\",\")\n            nn: [\"PA_h,AT_d,_,ET_d\".split(\",\"), \"_,SS_h\".split(\",\"), \"OBJ_h,_\".split(\",\")]\n            av: [[], \"_,AT_h\".split(\",\")]\n            jj: [[], \"_,AT_h\".split(\",\")]\n            pp: [[], \"_,PA_d\".split(\",\")]\n\n        @$result.find(\"#wordclassChk\").change ->\n            if $(this).is(\":checked\")\n                $(\".lemgram_result .wordclass_suffix\", self.$result).show()\n            else\n                $(\".lemgram_result .wordclass_suffix\", self.$result).hide()\n\n\n    resetView: ->\n        super()\n        $(\"#results-lemgram .content_target\").empty()\n\n    renderResult: (data, query) ->\n        resultError = super(data)\n        @resetView()\n        return  if resultError is false\n        unless data.relations\n            @showNoResults()\n            @resultDeferred.reject()\n        else if util.isLemgramId(query)\n            @renderTables query, data.relations\n            @resultDeferred.resolve()\n        else\n            @renderWordTables query, data.relations\n            @resultDeferred.resolve()\n\n    renderHeader: (wordClass, sections) ->\n        colorMapping =\n            SS: \"color_blue\"\n            OBJ: \"color_purple\"\n            ADV: \"color_green\"\n            Head: \"color_yellow\"\n            AT: \"color_azure\"\n            ET: \"color_red\"\n            PA: \"color_green\"\n\n        $(\".tableContainer:last .lemgram_section\").each((i) ->\n            $parent = $(this).find(\".lemgram_help\")\n            $(this).find(\".lemgram_result\").each ->\n                if $(this).data(\"rel\")\n                    color = colorMapping[$(this).data(\"rel\")]\n                    cell = $(\"<span />\", class: \"lemgram_header_item\")\n                        .localeKey(if i is 1 then altLabel else \"malt_\" + $(this).data(\"rel\"))\n                        .addClass(color).appendTo($parent)\n                    if i > 0\n                        altLabel =\n                            av: \"nn\"\n                            jj: \"nn\"\n                            nn: \"vb\"\n                            pp: \"nn\"\n                        [{wordClass}]\n                        cell.attr(\"rel\", altLabel).text util.getLocaleString(altLabel).capitalize()\n                    $(this).addClass(color).css \"border-color\", $(this).css(\"background-color\")\n                else\n                    $($.format(\"<span class='hit'><b>%s</b></span>\", $(this).data(\"word\"))).appendTo $parent\n\n        ).append \"<div style='clear:both;'/>\"\n\n    renderWordTables: (word, data) ->\n        self = this\n        wordlist = $.map(data, (item) ->\n            output = []\n            output.push item.head  if item.head.split(\"_\")[0] is word\n            output.push item.dep  if item.dep.split(\"_\")[0] is word\n            output\n        )\n        unique_words = []\n        $.each wordlist, (i, word) ->\n            unique_words.push word  if $.inArray(word, unique_words) is -1\n\n        $.each unique_words, (i, currentWd) ->\n            getRelType = (item) ->\n                if item.dep is currentWd\n                    item.rel + \"_h\"\n                else if item.head is currentWd\n                    item.rel + \"_d\"\n                else\n                    false\n            wordClass = currentWd.split(\"_\")[1].toLowerCase()\n            self.drawTable currentWd, wordClass, data, getRelType\n            self.renderHeader wordClass\n            $(\".tableContainer:last\").prepend($(\"<div>\",\n                class: \"header\"\n            ).html(util.lemgramToString(currentWd))).find(\".hit .wordclass_suffix\").hide()\n\n        $(\".lemgram_result .wordclass_suffix\").hide()\n        @hidePreloader()\n\n    renderTables: (lemgram, data) ->\n        getRelType = (item) ->\n            if item.dep is lemgram\n                item.rel + \"_h\"\n            else\n                item.rel + \"_d\"\n        wordClass = util.splitLemgram(lemgram).pos.slice(0, 2)\n        @drawTable lemgram, wordClass, data, getRelType\n        $(\".lemgram_result .wordclass_suffix\").hide()\n        @renderHeader wordClass\n        @hidePreloader()\n\n    drawTable: (token, wordClass, data, relTypeFunc) ->\n        inArray = (rel, orderList) ->\n            i = $.inArray(rel, orderList)\n            type = (if rel.slice(-1) is \"h\" then \"head\" else \"dep\")\n            i: i\n            type: type\n        self = this\n        c.log \"drawTable\", wordClass, @order[wordClass]\n        unless @order[wordClass]?\n            @showNoResults()\n            return\n        orderArrays = [[], [], []]\n        $.each data, (index, item) ->\n            $.each self.order[wordClass], (i, rel_type_list) ->\n                list = orderArrays[i]\n                rel = relTypeFunc(item)\n                return if rel is false\n                ret = inArray(rel, rel_type_list)\n                return if ret.i is -1\n                list[ret.i] = [] unless list[ret.i]\n                item.show_rel = ret.type\n                list[ret.i].push item\n\n\n        $.each orderArrays, (i, unsortedList) ->\n            $.each unsortedList, (_, list) ->\n                if list\n                    list.sort (first, second) ->\n                        second.mi - first.mi\n\n\n            if self.order[wordClass][i] and unsortedList.length\n                toIndex = $.inArray(\"_\", self.order[wordClass][i])\n                if util.isLemgramId(token)\n                    unsortedList.splice toIndex, 0,\n                        word: token.split(\"..\")[0].replace(/_/g, \" \")\n\n                else\n                    unsortedList.splice toIndex, 0,\n                        word: util.lemgramToString(token)\n\n            unsortedList = $.grep(unsortedList, (item, index) ->\n                Boolean item\n            )\n\n\n        container = $(\"<div>\", class: \"tableContainer radialBkg\")\n        .appendTo(\"#results-lemgram .content_target\")\n\n        $(\"#lemgramResultsTmpl\").tmpl(orderArrays,\n            lemgram: token\n        ).find(\".example_link\")\n        .append($(\"<span>\")\n            .addClass(\"ui-icon ui-icon-document\")\n        ).css(\"cursor\", \"pointer\")\n        .click($.proxy(self.onClickExample, self)\n        ).end()\n        .appendTo container\n\n        $(\"#results-lemgram td:nth-child(2)\").each -> # labels\n            $siblings = $(this).parent().siblings().find(\"td:nth-child(2)\")\n            siblingLemgrams = $.map($siblings, (item) ->\n                $(item).data(\"lemgram\").slice 0, -1\n            )\n            hasHomograph = $.inArray($(this).data(\"lemgram\").slice(0, -1), siblingLemgrams) isnt -1\n            prefix = (if $(this).data(\"depextra\").length then $(this).data(\"depextra\") + \" \" else \"\")\n\n            label = (if $(this).data(\"lemgram\") isnt \"\" then util.lemgramToString($(this).data(\"lemgram\"), hasHomograph) else \"&mdash;\")\n            $(this).html prefix + label\n\n\n\n    #   self.renderHeader(wordClass);\n    onClickExample: (event) ->\n        self = this\n        $target = $(event.currentTarget)\n        c.log \"onClickExample\", $target\n        data = $target.parent().tmplItem().data\n        instance = $(\"#result-container\").korptabs(\"addTab\", view.ExampleResults)\n        opts = instance.getPageInterval()\n        opts.ajaxParams =\n            head: data.head\n            dep: data.dep\n            rel: data.rel\n            depextra: data.depextra\n            corpus: data.corpus\n\n        util.localize instance.$result\n        instance.makeRequest opts\n\n    showWarning: ->\n        hasWarned = !!$.jStorage.get(\"lemgram_warning\")\n\n        #   var hasWarned = false;\n        unless hasWarned\n            $.jStorage.set \"lemgram_warning\", true\n            $(\"#sidebar\").sidebar \"show\", \"lemgramWarning\"\n            self.timeout = setTimeout(->\n                $(\"#sidebar\").sidebar \"hide\"\n            , 5000)\n\n    onentry: ->\n        c.log \"lemgramResults.onentry\", $.sm.getConfiguration()\n        @resultDeferred.done @showWarning\n\n    onexit: ->\n        clearTimeout self.timeout\n        $(\"#sidebar\").sidebar \"hide\"\n\n    showNoResults: ->\n        @hidePreloader()\n        @$result.find(\".content_target\").html $(\"<i />\").localeKey(\"no_lemgram_results\")\n\n    hideWordclass: ->\n        $(\"#results-lemgram td:first-child\").each ->\n            $(this).html $.format(\"%s <span class='wordClass'>%s</span>\", $(this).html().split(\" \"))\n\n\n\n\nnewDataInGraph = (dataName, horizontalDiagram, targetDiv) ->\n    dataItems = []\n    wordArray = []\n    corpusArray = []\n    statsResults[\"lastDataName\"] = dataName\n    if horizontalDiagram # hits/corpus\n        $.each statsResults.savedData[\"corpora\"], (corpus, obj) ->\n            if dataName is \"SIGMA_ALL\"\n\n                # ∑ selected\n                totfreq = 0\n                $.each obj[\"relative\"], (wordform, freq) ->\n                    numFreq = parseFloat(freq)\n                    totfreq += numFreq  if numFreq\n\n                dataItems.push\n                    value: totfreq\n                    caption: settings.corpora[corpus.toLowerCase()][\"title\"] + \": \" + util.formatDecimalString(totfreq.toString())\n                    shape_id: \"sigma_all\"\n\n            else\n\n                # Individual wordform selected\n                freq = parseFloat(obj[\"relative\"][dataName])\n                if freq\n                    dataItems.push\n                        value: freq\n                        caption: settings.corpora[corpus.toLowerCase()][\"title\"] + \": \" + util.formatDecimalString(freq.toString())\n                        shape_id: dataName\n\n                else\n                    dataItems.push\n                        value: 0\n                        caption: \"\"\n                        shape_id: dataName\n\n\n        $(\"#dialog\").remove()\n        if dataName is \"SIGMA_ALL\"\n            topheader = util.getLocaleString(\"statstable_hitsheader_lemgram\")\n            locstring = \"statstable_hitsheader_lemgram\"\n        else\n            topheader = util.getLocaleString(\"statstable_hitsheader\") + \"<i>#{dataName}</i>\"\n            locstring = \"statstable_hitsheader\"\n        relHitsString = util.getLocaleString(\"statstable_relfigures_hits\")\n        $(\"<div id='dialog' title='#{topheader}' />\")\n        .appendTo(\"#results-stats\")\n        .append(\"\"\"<br/><div id=\"statistics_switch\" style=\"text-align:center\">\n                            <a href=\"javascript:\" rel=\"localize[statstable_relfigures]\" data-mode=\"relative\">Relativa frekvenser</a>\n                            <a href=\"javascript:\" rel=\"localize[statstable_absfigures]\" data-mode=\"absolute\">Absoluta frekvenser</a>\n                        </div>\n                        <div id=\"chartFrame\" style=\"height:380\"></div>\n                        <p id=\"hitsDescription\" style=\"text-align:center\" rel=\"localize[statstable_absfigures_hits]\">#{relHitsString}</p>\"\"\"\n        ).dialog(\n            width: 400\n            height: 500\n            resize: ->\n                $(\"#chartFrame\").css \"height\", $(\"#chartFrame\").parent().width() - 20\n                stats2Instance.pie_widget \"resizeDiagram\", $(this).width() - 60\n                false\n\n            resizeStop: (event, ui) ->\n                w = $(this).dialog(\"option\", \"width\")\n                h = $(this).dialog(\"option\", \"height\")\n                if @width * 1.25 > @height\n                    $(this).dialog \"option\", \"height\", w * 1.25\n                else\n                    $(this).dialog \"option\", \"width\", h * 0.80\n                stats2Instance.pie_widget \"resizeDiagram\", $(this).width() - 60\n        ).css \"opacity\", 0\n        $(\"#ui-dialog-title-dialog\").localeKey \"statstable_hitsheader_lemgram\"\n        $(\"#dialog\").fadeTo 400, 1\n        $(\"#dialog\").find(\"a\").blur() # Prevents the focus of the first link in the \"dialog\"\n        stats2Instance = $(\"#chartFrame\").pie_widget(\n            container_id: \"chartFrame\"\n            data_items: dataItems\n            bar_horizontal: false\n            diagram_type: 0\n        )\n        statsSwitchInstance = $(\"#statistics_switch\").radioList(\n            change: ->\n                typestring = statsSwitchInstance.radioList(\"getSelected\").attr(\"data-mode\")\n                dataItems = new Array()\n                dataName = statsResults[\"lastDataName\"]\n                $.each statsResults.savedData[\"corpora\"], (corpus, obj) ->\n                    if dataName is \"SIGMA_ALL\"\n\n                        # sigma selected\n                        totfreq = 0\n                        $.each obj[typestring], (wordform, freq) ->\n                            if typestring is \"absolute\"\n                                numFreq = parseInt(freq)\n                            else\n                                numFreq = parseFloat(freq)\n                            totfreq += numFreq  if numFreq\n\n                        dataItems.push\n                            value: totfreq\n                            caption: settings.corpora[corpus.toLowerCase()][\"title\"] + \": \" + util.formatDecimalString(totfreq.toString(), false)\n                            shape_id: \"sigma_all\"\n\n                    else\n\n                        # Individual wordform selected\n                        if typestring is \"absolute\"\n                            freq = parseInt(obj[typestring][dataName])\n                        else\n                            freq = parseFloat(obj[typestring][dataName])\n                        if freq\n                            dataItems.push\n                                value: freq\n                                caption: settings.corpora[corpus.toLowerCase()][\"title\"] + \": \" + util.formatDecimalString(freq.toString(), false)\n                                shape_id: dataName\n\n                        else\n                            dataItems.push\n                                value: 0\n                                caption: \"\"\n                                shape_id: dataName\n\n\n                stats2Instance.pie_widget \"newData\", dataItems\n                if typestring is \"absolute\"\n                    loc = \"statstable_absfigures_hits\"\n                else\n                    loc = \"statstable_absfigures_hits\"\n                $(\"#hitsDescription\").localeKey loc\n\n            selected: \"relative\"\n        )\n\n\n\nclass view.StatsResults extends BaseResults\n    constructor: (tabSelector, resultSelector) ->\n        super tabSelector, resultSelector\n        self = this\n        @proxy = statsProxy\n        $(\".arcDiagramPicture\").live \"click\", ->\n            parts = $(this).attr(\"id\").split(\"__\")\n\n            if parts[1] != \"Σ\"\n                newDataInGraph(parts[1],true)\n            else # The ∑ row\n                newDataInGraph(\"SIGMA_ALL\",true)\n\n        $(\".c0 .link\").live \"click\", ->\n            c.log \"word click\", $(this).data(\"context\"), $(this).data(\"corpora\")\n            instance = $(\"#result-container\").korptabs(\"addTab\", view.ExampleResults)\n            instance.proxy.command = \"query\"\n            query = $(this).data(\"query\")\n            instance.makeRequest\n                corpora: $(this).data(\"corpora\").join(\",\")\n                cqp: decodeURIComponent(query)\n\n            util.localize instance.$result\n\n        $(window).resize ->\n            self.resizeGrid()\n\n        $(\"#exportButton\").unbind \"click\"\n        $(\"#exportButton\").click ->\n            selVal = $(\"#kindOfData option:selected\").val()\n            selType = $(\"#kindOfFormat option:selected\").val()\n            dataDelimiter = \";\"\n            dataDelimiter = \"\\t\"  if selType is \"TSV\"\n\n            # Generate CSV from the data\n            output = \"corpus\" + dataDelimiter\n            $.each statsResults.savedWordArray, (key, aword) ->\n                output += aword + dataDelimiter\n\n            output += String.fromCharCode(0x0D) + String.fromCharCode(0x0A)\n            $.each statsResults.savedData[\"corpora\"], (key, acorpus) ->\n                output += settings.corpora[key.toLowerCase()][\"title\"] + dataDelimiter\n                $.each statsResults.savedWordArray, (wkey, aword) ->\n                    amount = acorpus[selVal][aword]\n                    if amount\n                        output += util.formatDecimalString(amount.toString(), false, true) + dataDelimiter\n                    else\n                        output += \"0\" + dataDelimiter\n\n                output += String.fromCharCode(0x0D) + String.fromCharCode(0x0A)\n\n            if selType is \"TSV\"\n                window.open \"data:text/tsv;charset=latin1,\" + escape(output)\n            else\n                window.open \"data:text/csv;charset=latin1,\" + escape(output)\n\n\n    renderResult: (columns, data) ->\n        refreshHeaders = ->\n            $(\".slick-header-column:nth(1)\").click().click()\n            $(\".slick-column-name:nth(0),.slick-column-name:nth(1)\").not(\"[rel^=localize]\").each ->\n                $(this).localeKey $(this).text()\n\n        @resetView()\n        resultError = super(data)\n        return  if resultError is false\n        if data[0].total_value.absolute is 0\n            @showNoResults()\n            return\n        grid = new Slick.Grid($(\"#myGrid\"), data, columns,\n            enableCellNavigation: false\n            enableColumnReorder: true\n        )\n        @grid = grid\n        @resizeGrid()\n        sortCol = columns[1]\n        window.data = data\n        grid.onSort.subscribe (e, args) ->\n            sortCol = args.sortCol\n            data.sort (a, b) ->\n                if sortCol.field is \"hit_value\"\n                    x = a[sortCol.field]\n                    y = b[sortCol.field]\n                else\n                    x = a[sortCol.field].absolute or 0\n                    y = b[sortCol.field].absolute or 0\n                ret = ((if x is y then 0 else ((if x > y then 1 else -1))))\n                ret *= -1 unless args.sortAsc\n                ret\n\n            grid.setData data\n            grid.updateRowCount()\n            grid.render()\n\n        grid.onHeaderRendered.subscribe (e, args) ->\n            refreshHeaders()\n\n        refreshHeaders()\n        @renderPlot()\n        @hidePreloader()\n\n    renderPlot: ->\n        self = this\n        src = undefined\n        css = cursor: \"pointer\"\n        fill = \"#666\"\n        if $.keys(statsResults.savedData.corpora).length < 2\n            css[\"cursor\"] = \"normal\"\n            fill = \"lightgrey\"\n        barElem = $(\"#showBarPlot\").empty().get(0)\n        paper = new Raphael(barElem, 33, 33)\n        paper.path(\"M21.25,8.375V28h6.5V8.375H21.25zM12.25,28h6.5V4.125h-6.5V28zM3.25,28h6.5V12.625h-6.5V28z\").attr\n            fill: fill\n            stroke: \"none\"\n            transform: \"s0.6\"\n\n\n        # Line Diagram\n        $(\"#showBarPlot\").css(css).click ->\n            $.bbq.pushState display: \"bar_plot\"\n            false\n\n        @drawBarPlot()  if $.bbq.getState(\"display\") is \"bar_plot\"\n\n    drawBarPlot: ->\n        data = statsResults.savedData.corpora\n        display = []\n        max = 0\n        ticks = []\n        spacing = .25\n        accu = 0\n        $.each $.keys(data).sort(), (i, corpus) ->\n            ticks.push [accu + .5, settings.corpora[corpus.toLowerCase()].title]\n            display.push [accu, data[corpus].sums.relative]\n            max = data[corpus].sums.relative  if max < data[corpus].sums.relative\n            accu = accu + 1 + spacing\n\n        width = display.length * 60\n        $(\"#plot_canvas\").width width\n        $.plot $(\"#plot_canvas\"), [display],\n            yaxis:\n                max: max\n            xaxis:\n                ticks: ticks\n            bars:\n                show: true\n\n\n        #     lines : {show : true}\n        width = (if width > 1000 then 1000 else width + 40)\n        $(\"#plot_popup\").dialog(\n            width: width + 40\n            height: 500\n            title: \"Träffar per miljon token\"\n            beforeClose: ->\n                $.bbq.removeState \"display\"\n                false\n        ).css \"opacity\", 0\n        $(\"#ui-dialog-title-plot_popup\").localeKey \"hits_per_mil\"\n        $(\"#plot_popup\").fadeTo 400, 1\n\n\n    #   $(\"#plot_popup\").find(\"a\").blur();\n    resizeGrid: ->\n        return unless @grid\n        widthArray = $(\".slick-header-column\").map((item) ->\n            $(this).width()\n        )\n        tableWidth = $.reduce(widthArray, (a, b) ->\n            a + b\n        , 100)\n\n        #   tableWidth += 20;\n        parentWidth = $(\"body\").width() - 65\n        $(\"#myGrid\").width parentWidth\n        if tableWidth < parentWidth\n            @grid.autosizeColumns()\n        else\n            unless $(\".c0\").length\n                setTimeout $.proxy(@resizeHits, this), 1\n            else\n                @resizeHits()\n        $(\".slick-column-name:nth(0),.slick-column-name:nth(1)\").not(\"[rel^=localize]\").each ->\n            $(this).localeKey $(this).text()\n\n\n    resizeHits: ->\n        @setHitsWidth @getHitsWidth()\n\n    getHitsWidth: ->\n\n        # FIXME: not sure what's going on here.\n        widthArray = $(\".c0\").map(->\n            $(this).find(\":nth-child(1)\").outerWidth() + ($(this).find(\":nth-child(2)\").outerWidth() or 0)\n        )\n        unless widthArray.length\n            400\n        else\n            $.reduce widthArray, Math.max\n\n    setHitsWidth: (w) ->\n        return unless @grid\n        data = @grid.getColumns()\n        data[0].currentWidth = w\n        @grid.setColumns data\n\n\n    # showError : function() {\n    #   this.hidePreloader();\n    #   $(\"<i/>\")\n    #   .localeKey(\"error_occurred\")\n    #   .appendTo(\"#results-stats\");\n    # },\n    resetView: ->\n        super()\n        $(\"#exportStatsSection\").show()\n\n    showNoResults: ->\n        @hidePreloader()\n        $(\"#results-stats\").prepend $(\"<i/ class='error_msg'>\").localeKey(\"no_stats_results\")\n        $(\"#exportStatsSection\").hide()\n",
			"file": "app/scripts/results_coffee.coffee",
			"file_size": 41243,
			"file_write_time": 1357822455000000,
			"settings":
			{
				"buffer_size": 41215,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/scripts/controllers/controllers.coffee",
			"settings":
			{
				"buffer_size": 4706,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/styles/styles.scss",
			"settings":
			{
				"buffer_size": 23509,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/scripts/util_coffee.coffee",
			"settings":
			{
				"buffer_size": 5143,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/scripts/model_coffee.coffee",
			"settings":
			{
				"buffer_size": 19947,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/scripts/main.js",
			"settings":
			{
				"buffer_size": 22726,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/scripts/main_coffee.coffee",
			"settings":
			{
				"buffer_size": 22628,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/korp_statemachine.xml",
			"settings":
			{
				"buffer_size": 17269,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/yeoman.sublime-build",
	"command_palette":
	{
		"height": 227.0,
		"selected_items":
		[
			[
				"setting",
				"Preferences: Settings - Default"
			],
			[
				"key",
				"Preferences: Key Bindings - Default"
			],
			[
				"zen",
				"Zen Coding: Split or join tag"
			],
			[
				"matchin",
				"Zen Coding: Select matching tag name"
			],
			[
				"coffee",
				"Set Syntax: CoffeeScript"
			],
			[
				"pref",
				"Preferences: Settings - User"
			],
			[
				"tidy",
				"Tidy HTML"
			],
			[
				"prefere",
				"Preferences: Browse Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"cofee",
				"Coffee: Display JavaScript"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"repl",
				"SublimeREPL: CoffeScript"
			],
			[
				"shell",
				"SublimeREPL: Shell"
			],
			[
				"inden",
				"Indentation: Reindent Lines"
			],
			[
				"zen w",
				"Zen Coding: Wrap zen as you type"
			],
			[
				"zen as you",
				"Zen Coding: Zen as you type"
			],
			[
				"zen as",
				"Zen Coding: Zen as you type"
			],
			[
				"wrap",
				"Zen Coding: Wrap zen as you type"
			],
			[
				"revel",
				"File: Reveal"
			],
			[
				"align",
				"Preferences: Alignment Key Bindings – Default"
			],
			[
				"user",
				"Preferences: Key Bindings - User"
			],
			[
				"lint",
				"Snippet: Angular linky filter"
			],
			[
				"reind",
				"Indentation: Reindent Lines"
			],
			[
				"reinden",
				"Indentation: Reindent Lines"
			],
			[
				"toggle",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"side",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"buil",
				"SublimeREPL: Python - RUN current file"
			],
			[
				"python",
				"SublimeREPL: Python"
			],
			[
				"rep",
				"SublimeREPL: Python - execnet"
			],
			[
				"repl py",
				"SublimeREPL: Python - execnet"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"coff",
				"Coffee: Run Script"
			],
			[
				"directi",
				"Snippet: Angular Module directive (simple)"
			],
			[
				"angular",
				"Snippet: Angular $location"
			],
			[
				"packa",
				"Package Control: Remove Package"
			],
			[
				"angular controll",
				"Snippet: Angular Module controller"
			],
			[
				"angular controller",
				"Snippet: Angular Controller $dirty"
			],
			[
				"Snippet: ",
				"Snippet: Angular bootstrap"
			],
			[
				"angular con",
				"Snippet: Angular $controller"
			],
			[
				"direc",
				"Snippet: Angular Module directive (complete)"
			],
			[
				"angul",
				"Snippet: Angular filter"
			],
			[
				"before",
				"Snippet: .insertBefore"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"git",
				"Package Control: Install Package"
			],
			[
				"new",
				"File: New View into File"
			],
			[
				"expan",
				"Expand Selection to Function (JavaScript)"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/korp_statemachine.xml",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/scripts/main.js",
		"/Users/johan/Dropbox/Development/sublime/Packages/Default/Preferences.sublime-settings",
		"/Users/johan/Dropbox/Development/sublime/Packages/User/Preferences.sublime-settings",
		"/Users/johan/Dropbox/Development/sublime/Packages/Default/Default (OSX).sublime-keymap",
		"/Users/johan/Dropbox/Development/workspace_juno/lol/app/scripts/vendor/hm.js",
		"/Users/johan/Dropbox/Development/workspace_juno/lol/app/scripts/vendor/esprima.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/scripts/util_coffee.coffee",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/config.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/scripts/widgets_coffee.coffee",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/styles/styles.scss",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/scripts/widgets.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/markup/searchbar.html",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/Gruntfile.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/scripts/search_coffee.coffee",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/scripts/korp.js",
		"/Users/johan/Dropbox/Development/sublime/Packages/User/Default (OSX).sublime-keymap",
		"/tmp/subl stdin CqBW8F.txt",
		"/tmp/subl stdin DS5GRr.txt",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/scripts/jq_extensions.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/korp.sublime-project",
		"/Users/johan/Dropbox/Development/workspace_juno/angular_test/Gruntfile.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/scripts/searchview.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/common_lib/jquery.tmpl.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/scripts/model_coffee.coffee",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/scripts/model.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/scripts/results_coffee.coffee",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/scripts/bin/results_coffee.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/index.html",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/modes/parallel_mode.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/scripts/resultsview.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/markup/msd.html",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/markup/msdtags.html",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/translations/corpora-sv.json",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/translations/locale-en.json",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/translations/locale-sv.json",
		"/Users/johan/Dropbox/Development/sublime/Packages/sublime_text_alternative_autocompletion/Default (OSX).sublime-keymap",
		"/Users/johan/Dropbox/Development/sublime/Packages/update.sh",
		"/Users/johan/Dropbox/Development/sublime/Packages/update.py",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/styles/style.css",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/styles/styles.css",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/styles/styles.sass",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/components/jquery-ui/ui/jquery-ui.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/common_lib/themes/base/jquery-ui.css",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/lib/g.raphael-min.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/components/jquery/jquery.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/common_lib/jquery.format.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/lib/scxml/require/xml.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/lib/scxml/require.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/lib/modernizr-1.7.min.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/dist/scripts/9aa76527.korp_lib.js",
		"/Users/johan/Dropbox/Development/workspace_juno/angular_test/app/index.html",
		"/Users/johan/Dropbox/Development/workspace_juno/angular_test/app/scripts/controllers/test.coffee",
		"/Users/johan/Dropbox/Development/workspace_juno/angular_test/app/scripts/controllers/tmp.coffee",
		"/Users/johan/Dropbox/Development/workspace_juno/angular_test/app/styles/sass.scss",
		"/Users/johan/Dropbox/Development/workspace_juno/angular_test/app/components/angular/angular.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/scripts/util.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/common_lib/jquery.localize.js",
		"/Users/johan/Dropbox/Development/workspace_juno/angular_test/app/styles/sass.css",
		"/Users/johan/demo/htdocs_littb/app.css",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/modes/law_mode.js",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/app/translations/corpora-en.json",
		"/Users/johan/Development/workspace_juno/littb_gwtapp/utils/coffee-compile.sh",
		"/Applications/eclipse_juno/Eclipse.app/Contents/MacOS/eclipse.ini",
		"/Users/johan/Dropbox/Development/workspace_juno/korp/release.sh",
		"/Users/johan/www/cgi-bin/cgi_test.py",
		"/Users/mini/Dropbox/Development/workspace_juno/test/test.js",
		"/Users/mini/Dropbox/Development/sublime/Packages/Alignment/Default (OSX).sublime-keymap",
		"/Users/mini/Dropbox/Development/sublime/Packages/User/Default (OSX).sublime-keymap",
		"/Users/mini/Dropbox/Development/workspace_juno/test/test.html",
		"/Users/mini/Dropbox/Development/sublime/Packages/User/Preferences.sublime-settings",
		"/Users/johan/Dropbox/Development/workspace_juno/pyscxml/src/test/pyscxmlTest.py",
		"/Users/johan/Dropbox/Development/workspace_juno/pyscxml/w3c_tests/failed.py",
		"/Users/johan/Dropbox/Development/workspace_juno/pyscxml/src/scxml/compiler.py",
		"/Users/johan/Dropbox/Development/workspace_juno/pyscxml/w3c_tests/w3cTests.py",
		"/Users/johan/Dropbox/Development/workspace_juno/pyscxml/w3c_tests/assertions_xpath/test483.scxml",
		"/Users/johan/Dropbox/Development/workspace_juno/pyscxml/w3c_tests/newer_xpath_tests/failed/test519.scxml",
		"/Users/johan/Dropbox/Development/workspace_juno/pyscxml/w3c_tests/newer_xpath_tests/failed/test483.scxml",
		"/Users/johan/Dropbox/Development/sublime/Packages/XML/XML.sublime-settings",
		"/Users/johan/Dropbox/Development/workspace_juno/pyscxml/unittest_xml/all_configs.xml",
		"/Users/johan/Dropbox/Development/sublime/Packages/User/SideBarEnhancements/Open With/Side Bar.sublime-menu",
		"/Users/johan/Dropbox/Development/sublime/Packages/Python/Python.sublime-build",
		"/Users/johan/Dropbox/Development/workspace_juno/pyscxml/setup.py",
		"/Users/johan/Desktop/untitled.sublime-project",
		"/Users/johan/Dropbox/Development/sublime/Packages/Alignment/Default (OSX).sublime-keymap",
		"/Users/johan/Dropbox/Development/workspace_juno/pyscxml/unittest_xml/finalize.xml",
		"/Users/johan/Dropbox/Development/workspace_juno/pyscxml/src/scxml/pyscxml.py",
		"/Users/johan/Dropbox/Development/workspace_juno/pyscxml/examples/scxml_sandbox/server.py",
		"/Users/johan/Dropbox/Development/workspace_juno/test/test.coffee",
		"/Users/johan/Dropbox/Development/workspace_juno/test/test.html",
		"/Users/johan/Dropbox/Development/sublime/Packages/AdvancedNewFile/README.md",
		"/Users/johan/Dropbox/Development/workspace_juno/test/test.js",
		"/Users/johan/Library/Application Support/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/Users/johan/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/johan/Dropbox/Development/workspace_juno/test/test.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"app/scripts",
			"",
			"dist",
			"",
			"app/lib/slickgrid",
			"",
			".",
			"/",
			"All Files and Folders"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"initTimeGraph",
			"onHashChange",
			"tab_a_selector",
			"tabs",
			"href",
			".",
			"  if",
			"arguments",
			"kwicCallback",
			"renderResult",
			"effectSpeed",
			"renderResult",
			"prevCQP",
			"kwicCallback",
			"self",
			"renderResult",
			"\n        ",
			"renderKwicResult",
			"renderResult",
			"kwicWord",
			"//",
			".reading",
			"reading",
			"reading ",
			"reading_mode",
			"4",
			"2",
			"transition",
			"@transition",
			"renderResult",
			"applyTo",
			"showPreloader",
			"loading",
			"*",
			"inline-block",
			"circle",
			"isReading",
			"results_table.kwic",
			"results_table kwic",
			"reading_mode",
			".reading_mode",
			"logo",
			"reading_mode",
			"corpus_title",
			"colspan=\"1\"",
			"ng-class",
			"corpus_title_span",
			"corpus_title",
			"centerScrollbar",
			"@$result",
			"newSent",
			"<",
			">",
			"ng-",
			"prevCorpus",
			"prevSentence",
			"setContextData",
			"korpApp",
			"newDataInGraph",
			"  if",
			"getProxy",
			"readingProxy",
			"even_corpus",
			"ng-",
			"self",
			"rendercontextresult",
			"renderContextResult",
			"rendercontextresult",
			"renderContextResult",
			"rendercontextresult",
			"renderContextResult",
			"tab",
			"ope.kwic",
			"massageData",
			"td",
			"title",
			"matchStart",
			"matchEnd",
			"matchStart",
			"matchEnd",
			"matchStart",
			"wd",
			"findMatchSentence",
			"decr",
			"sentenc",
			"findMatchSentence",
			"struct",
			"sentence",
			"sentenceArray",
			"sentence",
			"massageData",
			"sentenceArray",
			"currentStruct",
			"wd",
			"currentStruct",
			"wd",
			"massageData",
			"kwic",
			"contextKwic",
			"setContextData",
			"match",
			"word",
			"kwicWord",
			"sentence",
			"{{wd.word}} ",
			"class=\"word\"",
			"span",
			"include-unwrap",
			"wd",
			"punctArray",
			"getStruct",
			"include-unwrap",
			"replace",
			"getStruct",
			"word_gap",
			"element",
			"esprima",
			"Esprima",
			"esprima",
			"match",
			"unless",
			"centerScrollbar",
			"makereq",
			"renderResults",
			"kwicCallback",
			"kwicResults",
			"kwicCallback",
			"kwicProxy"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"super",
			"class model.",
			"super",
			"    ",
			"        \\1",
			"            ",
			"        \\1",
			"        ",
			"            ",
			"deferred_sm"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "app/index.html",
					"settings":
					{
						"buffer_size": 17372,
						"regions":
						{
						},
						"selection":
						[
							[
								4860,
								4860
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1335.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "app/scripts/results_coffee.coffee",
					"settings":
					{
						"buffer_size": 41215,
						"regions":
						{
						},
						"selection":
						[
							[
								24013,
								24017
							]
						],
						"settings":
						{
							"syntax": "Packages/CoffeeScript/CoffeeScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9269.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "app/scripts/controllers/controllers.coffee",
					"settings":
					{
						"buffer_size": 4706,
						"regions":
						{
						},
						"selection":
						[
							[
								931,
								931
							]
						],
						"settings":
						{
							"syntax": "Packages/CoffeeScript/CoffeeScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 720.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "app/styles/styles.scss",
					"settings":
					{
						"buffer_size": 23509,
						"regions":
						{
						},
						"selection":
						[
							[
								11955,
								11955
							]
						],
						"settings":
						{
							"syntax": "Packages/Sass/Syntaxes/Sass.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11982.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "app/scripts/util_coffee.coffee",
					"settings":
					{
						"buffer_size": 5143,
						"regions":
						{
						},
						"selection":
						[
							[
								548,
								548
							]
						],
						"settings":
						{
							"syntax": "Packages/CoffeeScript/CoffeeScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "app/scripts/model_coffee.coffee",
					"settings":
					{
						"buffer_size": 19947,
						"regions":
						{
						},
						"selection":
						[
							[
								6604,
								6615
							]
						],
						"settings":
						{
							"syntax": "Packages/CoffeeScript/CoffeeScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2140.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "app/scripts/main.js",
					"settings":
					{
						"buffer_size": 22726,
						"regions":
						{
						},
						"selection":
						[
							[
								10339,
								10351
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3473.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "app/scripts/main_coffee.coffee",
					"settings":
					{
						"buffer_size": 22628,
						"regions":
						{
						},
						"selection":
						[
							[
								18095,
								18095
							]
						],
						"settings":
						{
							"syntax": "Packages/CoffeeScript/CoffeeScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6982.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "app/korp_statemachine.xml",
					"settings":
					{
						"buffer_size": 17269,
						"regions":
						{
						},
						"selection":
						[
							[
								347,
								351
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 299.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"inde",
				"app/index.html"
			],
			[
				"main",
				"app/scripts/main.js"
			],
			[
				"model",
				"app/scripts/model_coffee.coffee"
			],
			[
				"korp",
				"app/korp_statemachine.xml"
			],
			[
				"result",
				"app/scripts/results_coffee.coffee"
			],
			[
				"style",
				"app/styles/styles.scss"
			],
			[
				"man",
				"app/scripts/main.js"
			],
			[
				"resul",
				"app/scripts/results_coffee.coffee"
			],
			[
				"contr",
				"app/scripts/controllers/controllers.coffee"
			],
			[
				"uti",
				"app/scripts/util_coffee.coffee"
			],
			[
				"config",
				"app/config.js"
			],
			[
				"grunt",
				"Gruntfile.js"
			],
			[
				"util",
				"app/scripts/util_coffee.coffee"
			],
			[
				"control",
				"app/scripts/controllers/controllers.coffee"
			],
			[
				"confi",
				"app/config.js"
			],
			[
				"ind",
				"app/index.html"
			],
			[
				"search",
				"app/scripts/search_coffee.coffee"
			],
			[
				"styles",
				"app/styles/styles.scss"
			],
			[
				"widg",
				"app/scripts/widgets_coffee.coffee"
			],
			[
				"wid",
				"app/scripts/widgets.js"
			],
			[
				"coffee",
				"app/scripts/results_coffee.coffee"
			],
			[
				"jquery.tmpl",
				"app/common_lib/jquery.tmpl.js"
			],
			[
				"searc",
				"app/scripts/searchview.js"
			],
			[
				"conf",
				"app/config.js"
			],
			[
				"modes/",
				"app/modes/parallel_mode.js"
			],
			[
				"msd",
				"app/markup/msd.html"
			],
			[
				"sear",
				"app/scripts/searchview.js"
			],
			[
				"mode",
				"app/scripts/model.js"
			],
			[
				"loca",
				"app/translations/locale-en.json"
			],
			[
				"loc",
				"app/translations/locale-sv.json"
			],
			[
				"local",
				"app/translations/locale-en.json"
			],
			[
				"jquery-ui.css",
				"app/common_lib/themes/base/jquery-ui.css"
			],
			[
				"jquery-ui.js",
				"components/jquery-ui/ui/jquery-ui.js"
			],
			[
				"g.ra",
				"app/lib/g.raphael-min.js"
			],
			[
				"jq",
				"components/jquery/jquery.js"
			],
			[
				"jquery.form",
				"app/common_lib/jquery.format.js"
			],
			[
				"xml.js",
				"app/lib/scxml/require/xml.js"
			],
			[
				"requi",
				"app/lib/scxml/require.js"
			],
			[
				"modern",
				"app/lib/modernizr-1.7.min.js"
			],
			[
				"grun",
				"Gruntfile.js"
			],
			[
				"sass",
				"angular_test/app/styles/sass.scss"
			],
			[
				"jquery.loc",
				"korp/app/common_lib/jquery.localize.js"
			],
			[
				"test",
				"angular_test/app/scripts/controllers/test.coffee"
			],
			[
				"sass.",
				"angular_test/app/styles/sass.css"
			],
			[
				"moe",
				"korp/app/scripts/model.js"
			],
			[
				"corp",
				"korp/app/translations/corpora-en.json"
			],
			[
				"law",
				"korp/app/modes/law_mode.js"
			],
			[
				"corpo",
				"korp/app/translations/corpora-en.json"
			],
			[
				"resu",
				"app/scripts/resultsview.js"
			],
			[
				"in",
				"app/index.html"
			],
			[
				"pyscxt",
				"pyscxml/src/test/pyscxmlTest.py"
			],
			[
				"w3",
				"pyscxml/w3c_tests/w3cTests.py"
			],
			[
				"comp",
				"pyscxml/src/scxml/compiler.py"
			],
			[
				"fail",
				"pyscxml/w3c_tests/failed.py"
			],
			[
				"py",
				"pyscxml/src/test/pyscxmlTest.py"
			],
			[
				"server",
				"pyscxml/examples/scxml_sandbox/server.py"
			],
			[
				"pysc",
				"pyscxml/src/scxml/pyscxml.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"ny",
				"/Users/johan/Dropbox/Development/workspace_juno/nysno/nysno.sublime-project"
			],
			[
				"",
				"/Users/johan/Desktop/untitled.sublime-project"
			],
			[
				"nysn",
				"/Users/johan/Dropbox/Development/workspace_juno/nysno/nysno.sublime-project"
			],
			[
				"korp",
				"/Users/johan/Dropbox/Development/workspace_juno/korp/korp.sublime-project"
			],
			[
				"litt",
				"/Users/johan/Dropbox/Development/workspace_juno/littb/littb.sublime-project"
			],
			[
				"nys",
				"/Users/johan/Dropbox/Development/workspace_juno/nysno/nysno.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 194.0,
	"status_bar_visible": true
}
