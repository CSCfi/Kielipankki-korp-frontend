2010-11-04
* Den stora förändringen är att jag har fått lite skäll av Elisabet (på ett vänligt sätt) för att det saknas viktig funktionalitet. Detta tror jag är rätt så prioriterat, för att få användare som testar Korp.

En vanlig lingvist eller student behöver hjälp med svårare argument såsom "ordklass" (det gäller alltså klassen "query_arg"). Beroende på argumentets typ bör det finnas olika sätt att mata in värdet.

- om användaren väljer "ordet är", "ordet börjar med" m.m., så ska det vara en vanligt inmatningsruta
- men om anv. väljer "ordklassen är" så finns det ett begränsat antal värden och de bör presenteras som en <select>-lista

Följande bör alltså ändras i querytable.js:

- insertArg: arg_value kan vara en generell tom <span>, med nåt passande id; sedan kan insertArg anropa didSelectArgType för att ändra arg_value
- didSelectArgType: beroende på det nya värdet på select ska arg_value ovan fyllas med en passande input-typ

I config.js bör det finnas beskrivning av de olika argumenten. Ungefär såhär kanske:

settings.arg_types = {
    "word": String,
    "notword": String,
    "beginswith": String,
    "endswith": String,
    "regexp": RegExp,
    "pos": {"AB":"adverb", "DL":"determinerare", ...},
    "msd": String,
    "max": Number,
    "min": Number,
}

Här har jag använt String, RegExp och Number: alla tre ska bli <input type=text>, men man kan ju använda dem till att lägga till validering. Speciellt för Number.

didSelectArgType kan innehålla något såhär ungefär:

switch (argtype.constructor) {
	case Number:
	case String:
	case RegExp:
	    argvalue = $("<input type='text'/>").addClass("arg_value");
	    break;
	case Object:
	    argvalue = $("<select/>").addClass("arg_value");
	    for (var val in settings.arg_types[argtype]) {
	        argvalue.append($('<option/>').val(val).text(settings.arg_types[argtype][val]);
	    }
}


Förstår du hur jag tänker? Hinner du fixa detta inom de närmaste veckorna så vore det himla käckt. Här är förresten den fullständiga listan med pos-taggar:

parts_of_speech = {
    "AB": "adverb",
    "DL": "interpunktion",
    "DT": "determinnerare",
    "HA": "frågande/relativt adverb",
    "HD": "frågande/relativ determinerare",
    "HP": "frågande/relativt pronomen",
    "HS": "frågande/relativt possesivt pronomen",
    "IE": "infinitivmärke",
    "IN": "interjektion",
    "JJ": "adjektiv",
    "KN": "konjunktion",
    "NN": "substantiv",
    "PC": "particip",
    "PL": "partikel",
    "PM": "egennamn",
    "PN": "pronomen",
    "PP": "preposition",
    "PS": "possesivt pronomen",
    "RG": "grundtal",
    "RO": "ordningstal",
    "SN": "subjunktion",
    "UO": "utländskt ord",
    "VB": "verb"
}

settings.arg_types = {
    ...
    "pos": parts_of_speech,
    ...
}


Skapa tab för fullformssökning
	Ny tabb endast ett textfält (ett ord)
	användaren skriver in ett ord:
	hämta ut lemgram från http://spraakbanken.gu.se/ws/saldo-ws/fl/json/blomma   (l)
	filtrera bort alla som innehåller ..xxm. (där x är valfria tecken)
	användaren väljer lemgram (l)
	om lemgram finns: 
		gör sökningen med cqp: (t.ex.) [lex = "(blomma..nn.1.*)"]
	om lemgram ej finns:
		plocka ut p och gf från samma 'post' som l anropa http://spraakbanken.gu.se/ws/saldo-ws/gen/json/nn_1u_flicka/blomma
		där p är "nn_1u_flicka" och gf är "blomma"
		plocka ut form där msd ej är c, ci eller cm
		skapa cqp i korp med listan: [word="blomma"] | [word="blommas"]
	
	alternativ för 'relaxed search' (utökad sökning) under lemgram-sökning:
		[lex = "(blomma..nn.1.*)|(.*\|blomma..nn.1.*)"]
	
sökning relaterade ord
	skapa webtjänst i drupal:
	http://spraakbanken.gu.se/sblex/md1/[lemgram eller fullform]/blomma..1
		slå upp md1 http://spraakbanken.gu.se/ws/saldo-ws/md1/json/blomma..1
		
		om lemgram:
			slå mot lex: http://demo.spraakdata.gu.se/ws/lexikon/?saldo=ruderatväxt..1&saldo=bockblad..1&lexikon=saldo
			plocka ut <lem> där pos ej slutar på: xc, h och m
			returnera array med lemgram:
		om fullform:
			slå mot lex: http://demo.spraakdata.gu.se/ws/lexikon/?saldo=ruderatväxt..1&saldo=bockblad..1&lexikon=saldom	
			plocka ut <LexicalEntry> där pos ej slutar på: xc, h och m
				plocka ut form där <param> ej är ci, cm och c
				spara wf i mängd
			returnera mängd
	
	steg 1:
	välj saldo id (betydelse)(id) från http://spraakbanken.gu.se/ws/saldo-ws/fl/json/blomma

	steg 2:		
	om lemgram är med i korpusen:		
		anropa http://spraakbanken.gu.se/sblex/md1/lemgram/blomma..1
		skapa cqp i korp med listan: [lex = "(blomma..nn.1.*)"] | [lex = "(maskros..nn.1.*)"] ...
	om lemgram saknas i korpusen:
		anropa http://spraakbanken.gu.se/sblex/md1/fullform/blomma..1
		skapa cqp i korp med listan: [word="blomma"] | [word="blomman"] ...