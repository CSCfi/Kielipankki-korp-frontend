<scxml version="1.0" xmlns="http://www.w3.org/2005/07/scxml"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.w3.org/2005/07/scxml http://www.w3.org/2011/04/SCXML/scxml.xsd"
    profile="ecmascript" initial="init" >

    <script><![CDATA[

        function kwicRequest(page, cqp) {
        	kwicResults.showPreloader();
        	var isReading = kwicResults.$result.is(".reading_mode");
            //var kwicCallback = isReading ? kwicResults.renderContextResult : kwicResults.renderKwicResult;
            var kwicCallback = kwicResults.renderResult;
            var kwicopts = {"sort" : $.bbq.getState("sort")};
            if(kwicopts['sort'] == "random") {
                var rnd;
                if(_event.data.isInit && $.bbq.getState("random_seed")) {
                    rnd = $.bbq.getState("random_seed");
                } else {
                    rnd = Math.ceil(Math.random() * 10000000);
                    $.bbq.pushState({"random_seed" : rnd});
                }
                kwicopts['random_seed'] = rnd;
            }
            if(isReading) {
				kwicopts.context = settings.corpusListing.getContextQueryString();
			}
			if(cqp)
				kwicopts.cqp = cqp;
            kwicProxy.makeRequest(kwicopts, page, $.proxy(kwicResults.onProgress, kwicResults), null, $.proxy(kwicCallback, kwicResults));
        }

        function kwicSearch(page) {
            simpleSearch.resetView();
            kwicRequest(page);

            statsProxy.makeRequest($("#cqp_string").val(), $.proxy(statsResults.onProgress, statsResults));

        }

        function lemgramSearch(lemgram, searchPrefix, searchSuffix, page) {
            c.log("lemgramSearch", lemgram);
            lemgramResults.showPreloader();
            simpleSearch
            .setPlaceholder(util.lemgramToString(lemgram).replace(/<.*?>/g, ""), lemgram)
            .clear();
            var type =
            lemgramProxy.makeRequest(lemgram, "lemgram", $.proxy(lemgramResults.onProgress, lemgramResults));
            searchProxy.relatedWordSearch(lemgram);


            var cqp = lemgramProxy.lemgramSearch(lemgram, searchPrefix, searchSuffix);
            statsProxy.makeRequest(cqp, $.proxy(statsResults.onProgress, statsResults));
            kwicRequest(page, cqp);
            //kwicProxy.makeRequest({cqp : cqp, "sort" : $.bbq.getState("sort")}, page, $.proxy(kwicResults.onProgress, kwicResults));
            $("#cqp_string").val(cqp);
        }

        function gotoFirstResultTab() {
            c.log("faking kwic result tab click");
            $("#result-container li:first > a").trigger("click");
            setTimeout(function() {
            	if($("#result-container").is(".ui-tabs"))
                	$("#result-container").korptabs("option", "disabled", [0,1,2]);
            }, 100);
        }
    ]]></script>

    <state id="init">
        <transition target="main">
            <assign location="searchProxy"           expr="new model.SearchProxy()"/>
            <assign location="kwicProxy"             expr="new model.KWICProxy()"/>
            <assign location="statsProxy"            expr="new model.StatsProxy()"/>
            <assign location="lemgramProxy"          expr="new model.LemgramProxy()"/>
            <assign location="authenticationProxy"   expr="new model.AuthenticationProxy()"/>
            <assign location="timeProxy"   			 expr="new model.TimeProxy()"/>

            <assign location="advancedSearch"        expr="new view.AdvancedSearch('#korp-advanced')"/>
            <assign location="extendedSearch"        expr="new view.ExtendedSearch('#korp-extended')"/>
            <assign location="simpleSearch"          expr="new view.SimpleSearch('#korp-simple')"/>
            <assign location="kwicResults"           expr="new view.KWICResults('#result-container li:first', '#results-kwic')"/>
            <assign location="statsResults"          expr="new view.StatsResults('#result-container li:nth-child(2)', '#results-stats')"/>
            <assign location="lemgramResults"        expr="new view.LemgramResults('#result-container li:nth-child(3)', '#results-lemgram')"/>

        </transition>
    </state>

    <state id="main" initial="p">
        <onentry>
            <log label="entered main" />
        </onentry>

        <parallel id="p" initial="simple results sidebar logger">

            <state id="search" initial="simple">
                <state id="search_inner">


                    <!--<history id="search_history">
                        <onentry>
                            <script>
                                if($("#result-container").is(".ui-tabs"))
                                     $("#result-container").korptabs("option", "disabled", [0,1,2]);
                            </script>
                        </onentry>
                        <transition target="simple" />
                </history>-->

<!--                     <transition event="submit.word" target="simple" cond="In('kwic')"> -->
<!--                     	<script> -->

<!--                     	</script> -->
<!--                     </transition> -->

                    <transition event="searchtab.simple" target="simple" />
                    <transition event="searchtab.extended" target="extended" />
                    <transition event="searchtab.advanced" target="advanced" />

                    <state id="simple">
                        <transition event="submit.word" target="simple">
                            <script><![CDATA[
                                $("#simple_text").get(0).blur();
                                kwicSearch(_event.data.page);

                                lemgramResults.showPreloader();
                                lemgramProxy.makeRequest($("#simple_text").val(), "word", $.proxy(lemgramResults.onProgress, lemgramResults));
                            ]]></script>
                        </transition>

                        <transition event="submit.lemgram" target="simple">
                            <script>
                                lemgramSearch(_event.data.value, simpleSearch.isSearchPrefix(), simpleSearch.isSearchSuffix(), _event.data.page);
                            </script>
                        </transition>

                        <transition event="submit.cqp" target="simple">
                            <script>
                                $("#simple_text").get(0).blur();
                                kwicSearch(_event.data.page);
                            </script>
                        </transition>

                        <onexit>
                            <script>
                                $("#simple_text.ui-autocomplete-input").autocomplete("close");
                            </script>
                        </onexit>
                    </state>
                    <state id="extended">
                        <transition event="submit.cqp" target="extended">
                            <script>
                                kwicSearch(_event.data.page);
                            </script>
                        </transition>
                        <transition event="submit.lemgram" target="extended">
                            <script>
                                //extendedSearch.setOneToken("lex", _event.data);
                                lemgramSearch(_event.data.value, null, null, _event.data.page);
                            </script>
                        </transition>
                    </state>
                    <state id="advanced">
                        <transition event="submit.cqp" target="advanced">
                            <script>
                                $("#simple_text").get(0).blur();
                                kwicSearch(_event.data.page);
                            </script>
                        </transition>
                        <!--<transition event="submit.cqp" target="search_history">
                            <script>
                                c.log("submit.cqp, advanced");
                                $("#simple_text").get(0).blur();
                                kwicSearch(_event.data.page);
                                gotoFirstResultTab();
                            </script>
                        </transition>
                    -->
                    </state>
                </state>
            </state>

            <state id="results" initial="results_hidden">

                <state id="results_hidden">
                    <onentry>
                        <script>
                            $('#results-wrapper').hide();
                        </script>
                    </onentry>
                    <onexit>
                        <script>
                            $('#results-wrapper').fadeIn();
<!--                             $('#welcome').fadeOut(); -->
                        </script>
                    </onexit>

                    <transition event="submit" target="results_kwic" cond="($.bbq.getState('result-container', true) || 0) === 0" />
                    <transition event="submit" target="results_stats" cond="($.bbq.getState('result-container', true)) === 1" />
                    <transition event="submit" target="results_lemgram" cond="($.bbq.getState('result-container', true)) === 2" />

                </state>

                <state id="results_visible" initial="results_kwic">

                    <transition event="resultstab.kwic" target="results_kwic" />
                    <transition event="resultstab.lemgram" target="results_lemgram" />
                    <transition event="resultstab.stats" target="results_stats" />
                    <transition event="resultstab.custom" target="results_custom" />

                    <state id="results_kwic" initial="results_kwic_init">

                        <onentry>
                            <script>
                                kwicResults.onentry();
                                util.setJsonLink(kwicProxy.prevRequest);
                            </script>
                        </onentry>

                        <state id="results_kwic_init">
                            <transition target="kwic_word_selected" cond="kwicResults.selectionManager.hasSelected()" />
                            <transition target="kwic_word_not_selected" />
                        </state>

                        <state id="kwic_word_selected">
                            <onentry>
                                <script>
                                    c.log("sidebar show")
                                    $("#sidebar").sidebar("show");
                                </script>
                            </onentry>
                            <transition event="word.deselect" target="kwic_word_not_selected" />
                            <onexit>
                                <script>
                                    $("#sidebar").sidebar("hide");
                                </script>
                            </onexit>
                        </state>

                        <state id="kwic_word_not_selected">
                            <transition event="word.select" target="kwic_word_selected" />
                        </state>


                        <!-- <state id="display">

                        	<state id="display_kwic">
                        		<onentry>
                        			<script>
                        				kwicResults.$result.removeClass("reading_mode");
                        				if(kwicResults.$result.find(".results_table.kwic").is(":empty")) {
											kwicResults.makeRequest();
										} else {
                        					kwicResults.centerScrollbar();
                       					}
                        			</script>
                        		</onentry>
                        		<transition event="display_change" target="display_reading" />
                        	</state>
                        	<state id="display_reading">
                        		<onentry>
                        			<script>
                        				kwicResults.$result.addClass("reading_mode");
                        				if(kwicResults.$result.find(".results_table.reading").is(":empty")) {
											kwicResults.makeRequest();
										}
                        			</script>
                        		</onentry>
                        		<transition event="display_change" target="display_kwic" />
                        	</state>
                        </state>-->

                        <onexit>
                            <script>
                                kwicResults.onexit();
                            </script>
                        </onexit>
                    </state>
                    <state id="results_stats">
                        <onentry>
                            <script>
                                statsResults.resizeGrid();
                                util.setJsonLink(statsProxy.prevRequest);
                            </script>
                        </onentry>
                        <transition event="submit.word" target="results_stats" />
                        <transition event="submit.cqp" target="results_stats" />

                    </state>
                    <state id="results_lemgram">
                        <onentry>
                            <script>
                                util.setJsonLink(lemgramProxy.prevRequest);
                                lemgramResults.onentry();
                            </script>
                        </onentry>
                         <transition event="submit.cqp" target="results_lemgram" >
                             <script>
                                 gotoFirstResultTab();

                             </script>
                        </transition>
                        <onexit>
                            <script>
                                lemgramResults.onexit();
                            </script>
                        </onexit>
                    </state>

                    <state id="results_custom" initial="custom_entry">

                        <onentry>
                            <assign location="currentCustom" expr="$('#result-container').korptabs('getCurrentInstance')" />
                            <script>
                                currentCustom.onentry();
                                util.setJsonLink(currentCustom.proxy.prevRequest);
                            </script>
                        </onentry>
                        <state id="custom_entry">
                            <transition
                                cond="currentCustom.selectionManager.hasSelected()"
                                target="custom_word_selected"></transition>

                            <transition target="custom_word_not_selected" />
                        </state>

                        <transition event="submit" target="custom_entry">
                            <script>
                                //gotoFirstResultTab();
                            </script>
                        </transition>

                        <state id="custom_word_selected">
                            <onentry>
                                <script><![CDATA[
                                    $("#sidebar").sidebar("show");
                                ]]></script>
                            </onentry>
                            <transition event="word.deselect" target="custom_word_not_selected" />
                            <onexit>
                                <script>
                                    $("#sidebar").sidebar("hide");
                                </script>
                            </onexit>
                        </state>

                        <state id="custom_word_not_selected">
                            <transition event="word.select" target="custom_word_selected" />
                        </state>

                        <onexit>
                            <script>
                                currentCustom.onexit();
                            </script>
                        </onexit>
                    </state>

                </state>

            </state>

            <state id="sidebar" initial="sidebar_hidden">
                <state id="sidebar_hidden">
                    <transition event="sidebar.show.end" target="sidebar_visible"></transition>
                </state>
                <state id="sidebar_visible">
                    <transition event="sidebar.hide.end" target="sidebar_hidden"></transition>
                </state>
            </state>

            <state id="logger" initial="l2">
                <state id="l2">
<!--                     <transition event="*" target="l2"> -->
<!--                          <log expr="'event found: ' + _event.name" /> -->
<!--                         <script> -->
<!--                             c.log("conf", $.sm.getConfiguration()); -->
<!--                         </script> -->
<!--                     </transition> -->
                </state>
            </state>

        </parallel>
    </state>
</scxml>